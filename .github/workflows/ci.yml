name: CI
on: [push, pull_request]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]

    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - name: clippy
        if: matrix.os == 'ubuntu-latest' && matrix.rust == 'stable'
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: cache cargo binaries
        id: cache
        uses: actions/cache@v2
        with:
          path: "/usr/share/rust/.cargo"
          key: ${{ runner.os }}-cargo-bins-${{ env.GITHUB_SHA }}
          restore-keys: ${{ runner.os }}-cargo-bins-

      - name: install tools
        if: steps.cache.outputs.cache_hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-all-features

      - name: Run Tests
        uses: actions-rs/cargo@v1
        with:
          command: test-all-features

  release:
    name: release ${{ matrix.target }}
    needs: test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-gnu
            archive: zip
          - target: x86_64-unknown-linux-musl
            archive: tar.xz tar.gz tar.zst
          - target: x86_64-unknown-linux-gnu
            archive: tar.xz tar.gz tar.zst
    steps:
      - name: âœ… Checkout âœ…
        uses: actions/checkout@v4
      - name: ðŸ§± Build and Release ðŸ§±
        uses: rust-build/rust-build.action@v1.4.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          RUSTTARGET: ${{ matrix.target }}
          ARCHIVE_TYPES: ${{ matrix.archive }}
